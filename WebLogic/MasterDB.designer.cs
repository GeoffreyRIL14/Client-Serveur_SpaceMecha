#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebLogic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SpaceMecha")]
	public partial class MasterDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertProfil(Profil instance);
    partial void UpdateProfil(Profil instance);
    partial void DeleteProfil(Profil instance);
    partial void InsertGroupSign(GroupSign instance);
    partial void UpdateGroupSign(GroupSign instance);
    partial void DeleteGroupSign(GroupSign instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertPricePool(PricePool instance);
    partial void UpdatePricePool(PricePool instance);
    partial void DeletePricePool(PricePool instance);
    #endregion
		
		public MasterDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SpaceMechaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MasterDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MasterDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MasterDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MasterDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Event
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Profil> Profil
		{
			get
			{
				return this.GetTable<Profil>();
			}
		}
		
		public System.Data.Linq.Table<GroupSign> GroupSign
		{
			get
			{
				return this.GetTable<GroupSign>();
			}
		}
		
		public System.Data.Linq.Table<Price> Price
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<PricePool> PricePool
		{
			get
			{
				return this.GetTable<PricePool>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEvent;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Description;
		
		private string _Image;
		
		private EntitySet<GroupSign> _GroupSign;
		
		private EntitySet<PricePool> _PricePool;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEventChanging(int value);
    partial void OnidEventChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Event()
		{
			this._GroupSign = new EntitySet<GroupSign>(new Action<GroupSign>(this.attach_GroupSign), new Action<GroupSign>(this.detach_GroupSign));
			this._PricePool = new EntitySet<PricePool>(new Action<PricePool>(this.attach_PricePool), new Action<PricePool>(this.detach_PricePool));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_GroupSign", Storage="_GroupSign", ThisKey="idEvent", OtherKey="idEvent")]
		public EntitySet<GroupSign> GroupSign
		{
			get
			{
				return this._GroupSign;
			}
			set
			{
				this._GroupSign.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_PricePool", Storage="_PricePool", ThisKey="idEvent", OtherKey="idEvent")]
		public EntitySet<PricePool> PricePool
		{
			get
			{
				return this._PricePool;
			}
			set
			{
				this._PricePool.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupSign(GroupSign entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_GroupSign(GroupSign entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_PricePool(PricePool entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_PricePool(PricePool entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profil")]
	public partial class Profil : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idProfil;
		
		private string _Name;
		
		private string _Avatar;
		
		private int _Rank;
		
		private string _TokenId;
		
		private EntitySet<GroupSign> _GroupSign;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidProfilChanging(int value);
    partial void OnidProfilChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnRankChanging(int value);
    partial void OnRankChanged();
    partial void OnTokenIdChanging(string value);
    partial void OnTokenIdChanged();
    #endregion
		
		public Profil()
		{
			this._GroupSign = new EntitySet<GroupSign>(new Action<GroupSign>(this.attach_GroupSign), new Action<GroupSign>(this.detach_GroupSign));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProfil", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idProfil
		{
			get
			{
				return this._idProfil;
			}
			set
			{
				if ((this._idProfil != value))
				{
					this.OnidProfilChanging(value);
					this.SendPropertyChanging();
					this._idProfil = value;
					this.SendPropertyChanged("idProfil");
					this.OnidProfilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(MAX)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int NOT NULL")]
		public int Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenId", DbType="VarChar(MAX)")]
		public string TokenId
		{
			get
			{
				return this._TokenId;
			}
			set
			{
				if ((this._TokenId != value))
				{
					this.OnTokenIdChanging(value);
					this.SendPropertyChanging();
					this._TokenId = value;
					this.SendPropertyChanged("TokenId");
					this.OnTokenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_GroupSign", Storage="_GroupSign", ThisKey="idProfil", OtherKey="idProfil")]
		public EntitySet<GroupSign> GroupSign
		{
			get
			{
				return this._GroupSign;
			}
			set
			{
				this._GroupSign.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupSign(GroupSign entity)
		{
			this.SendPropertyChanging();
			entity.Profil = this;
		}
		
		private void detach_GroupSign(GroupSign entity)
		{
			this.SendPropertyChanging();
			entity.Profil = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupSign")]
	public partial class GroupSign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idProfil;
		
		private int _idEvent;
		
		private int _Score;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Profil> _Profil;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidProfilChanging(int value);
    partial void OnidProfilChanged();
    partial void OnidEventChanging(int value);
    partial void OnidEventChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    #endregion
		
		public GroupSign()
		{
			this._Event = default(EntityRef<Event>);
			this._Profil = default(EntityRef<Profil>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProfil", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idProfil
		{
			get
			{
				return this._idProfil;
			}
			set
			{
				if ((this._idProfil != value))
				{
					if (this._Profil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProfilChanging(value);
					this.SendPropertyChanging();
					this._idProfil = value;
					this.SendPropertyChanged("idProfil");
					this.OnidProfilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_GroupSign", Storage="_Event", ThisKey="idEvent", OtherKey="idEvent", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.GroupSign.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.GroupSign.Add(this);
						this._idEvent = value.idEvent;
					}
					else
					{
						this._idEvent = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_GroupSign", Storage="_Profil", ThisKey="idProfil", OtherKey="idProfil", IsForeignKey=true)]
		public Profil Profil
		{
			get
			{
				return this._Profil.Entity;
			}
			set
			{
				Profil previousValue = this._Profil.Entity;
				if (((previousValue != value) 
							|| (this._Profil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profil.Entity = null;
						previousValue.GroupSign.Remove(this);
					}
					this._Profil.Entity = value;
					if ((value != null))
					{
						value.GroupSign.Add(this);
						this._idProfil = value.idProfil;
					}
					else
					{
						this._idProfil = default(int);
					}
					this.SendPropertyChanged("Profil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPrice;
		
		private string _Name;
		
		private string _Description;
		
		private string _Path;
		
		private string _Image;
		
		private EntitySet<PricePool> _PricePool;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPriceChanging(int value);
    partial void OnidPriceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Price()
		{
			this._PricePool = new EntitySet<PricePool>(new Action<PricePool>(this.attach_PricePool), new Action<PricePool>(this.detach_PricePool));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPrice", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPrice
		{
			get
			{
				return this._idPrice;
			}
			set
			{
				if ((this._idPrice != value))
				{
					this.OnidPriceChanging(value);
					this.SendPropertyChanging();
					this._idPrice = value;
					this.SendPropertyChanged("idPrice");
					this.OnidPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="VarChar(100)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Price_PricePool", Storage="_PricePool", ThisKey="idPrice", OtherKey="idPrice")]
		public EntitySet<PricePool> PricePool
		{
			get
			{
				return this._PricePool;
			}
			set
			{
				this._PricePool.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PricePool(PricePool entity)
		{
			this.SendPropertyChanging();
			entity.Price = this;
		}
		
		private void detach_PricePool(PricePool entity)
		{
			this.SendPropertyChanging();
			entity.Price = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PricePool")]
	public partial class PricePool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPricePool;
		
		private System.Nullable<int> _idEvent;
		
		private System.Nullable<int> _idPrice;
		
		private int _placeRangeMin;
		
		private int _placeRangeMax;
		
		private double _placePurcent;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Price> _Price;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPricePoolChanging(int value);
    partial void OnidPricePoolChanged();
    partial void OnidEventChanging(System.Nullable<int> value);
    partial void OnidEventChanged();
    partial void OnidPriceChanging(System.Nullable<int> value);
    partial void OnidPriceChanged();
    partial void OnplaceRangeMinChanging(int value);
    partial void OnplaceRangeMinChanged();
    partial void OnplaceRangeMaxChanging(int value);
    partial void OnplaceRangeMaxChanged();
    partial void OnplacePurcentChanging(double value);
    partial void OnplacePurcentChanged();
    #endregion
		
		public PricePool()
		{
			this._Event = default(EntityRef<Event>);
			this._Price = default(EntityRef<Price>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPricePool", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPricePool
		{
			get
			{
				return this._idPricePool;
			}
			set
			{
				if ((this._idPricePool != value))
				{
					this.OnidPricePoolChanging(value);
					this.SendPropertyChanging();
					this._idPricePool = value;
					this.SendPropertyChanged("idPricePool");
					this.OnidPricePoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", DbType="Int")]
		public System.Nullable<int> idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPrice", DbType="Int")]
		public System.Nullable<int> idPrice
		{
			get
			{
				return this._idPrice;
			}
			set
			{
				if ((this._idPrice != value))
				{
					if (this._Price.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPriceChanging(value);
					this.SendPropertyChanging();
					this._idPrice = value;
					this.SendPropertyChanged("idPrice");
					this.OnidPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_placeRangeMin", DbType="Int NOT NULL")]
		public int placeRangeMin
		{
			get
			{
				return this._placeRangeMin;
			}
			set
			{
				if ((this._placeRangeMin != value))
				{
					this.OnplaceRangeMinChanging(value);
					this.SendPropertyChanging();
					this._placeRangeMin = value;
					this.SendPropertyChanged("placeRangeMin");
					this.OnplaceRangeMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_placeRangeMax", DbType="Int NOT NULL")]
		public int placeRangeMax
		{
			get
			{
				return this._placeRangeMax;
			}
			set
			{
				if ((this._placeRangeMax != value))
				{
					this.OnplaceRangeMaxChanging(value);
					this.SendPropertyChanging();
					this._placeRangeMax = value;
					this.SendPropertyChanged("placeRangeMax");
					this.OnplaceRangeMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_placePurcent", DbType="Float NOT NULL")]
		public double placePurcent
		{
			get
			{
				return this._placePurcent;
			}
			set
			{
				if ((this._placePurcent != value))
				{
					this.OnplacePurcentChanging(value);
					this.SendPropertyChanging();
					this._placePurcent = value;
					this.SendPropertyChanged("placePurcent");
					this.OnplacePurcentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_PricePool", Storage="_Event", ThisKey="idEvent", OtherKey="idEvent", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.PricePool.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.PricePool.Add(this);
						this._idEvent = value.idEvent;
					}
					else
					{
						this._idEvent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Price_PricePool", Storage="_Price", ThisKey="idPrice", OtherKey="idPrice", IsForeignKey=true)]
		public Price Price
		{
			get
			{
				return this._Price.Entity;
			}
			set
			{
				Price previousValue = this._Price.Entity;
				if (((previousValue != value) 
							|| (this._Price.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Price.Entity = null;
						previousValue.PricePool.Remove(this);
					}
					this._Price.Entity = value;
					if ((value != null))
					{
						value.PricePool.Add(this);
						this._idPrice = value.idPrice;
					}
					else
					{
						this._idPrice = default(Nullable<int>);
					}
					this.SendPropertyChanged("Price");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
